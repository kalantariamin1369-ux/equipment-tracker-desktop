name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
  push:
    tags:
      - "v*"

permissions:
  contents: read

jobs:
  build-and-release:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@6fb02220983dee41ce7ae257b6f4d8f9bf5ed4ce # v2.0.0

      - name: Setup NuGet
        uses: NuGet/setup-nuget@a21f25cd3998bf370fde17e3f1b4c12c175172c9 # v2.0.0

      - name: Clear NuGet caches
        run: nuget locals all -clear

      - name: Restore NuGet packages
        run: nuget restore EquipmentTracker.sln

      - name: Build (Release x64)
        run: msbuild EquipmentTracker.sln /p:Configuration=Release /p:Platform="x64"

      - name: List payload contents
        shell: pwsh
        run: |
          Write-Host "Build output contents:"
          Get-ChildItem -Recurse "EquipmentTracker\bin\Release" | Select-Object FullName
          Write-Host "Checking for SQLite files:"
          Get-ChildItem -Recurse "EquipmentTracker\bin\Release" -Filter "*SQLite*" | Select-Object FullName

      - name: Compute version
        id: ver
        shell: pwsh
        run: |
          if ($env:GITHUB_REF -like "refs/tags/*") {
            $tag = $env:GITHUB_REF -replace "refs/tags/", ""
          } elseif ('${{ github.event.inputs.version }}') {
            $tag = '${{ github.event.inputs.version }}'
          } else {
            $tag = "v0.0.0"
          }
          echo "version=$tag" >> $env:GITHUB_OUTPUT

      - name: Prepare payload
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path build\release | Out-Null
          Copy-Item -Recurse -Force "EquipmentTracker\bin\Release\*" "build\release\"
          Write-Host "Payload contents:"
          Get-ChildItem -Recurse "build\release" | Select-Object FullName

      - name: Install Inno Setup
        shell: pwsh
        run: |
          iwr -Uri https://jrsoftware.org/download.php/is.exe -OutFile is.exe
          Start-Process .\is.exe -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART" -Wait
          $innobin = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
          if (-not (Test-Path $innobin)) { throw "ISCC not found" }

      - name: Create installer via Inno Setup
        shell: pwsh
        run: |
          $ver = '${{ steps.ver.outputs.version }}'.TrimStart('v')
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" \
            /DAppVersion=$ver \
            /DBuildPayload="${{ github.workspace }}\\build\\release" \
            build\\installer\\setup.iss

      - name: Create portable ZIP
        shell: pwsh
        run: |
          Compress-Archive -Path build\release\* -DestinationPath "EquipmentTracker-Windows-Portable-${{ steps.ver.outputs.version }}.zip" -Force

      - name: Upload artifacts
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: artifacts
          path: |
            build\installer\Output\*.exe
            EquipmentTracker-Windows-Portable-${{ steps.ver.outputs.version }}.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          tag_name: ${{ steps.ver.outputs.version }}
          draft: false
          prerelease: false
          files: |
            build/installer/Output/*.exe
            EquipmentTracker-Windows-Portable-${{ steps.ver.outputs.version }}.zip