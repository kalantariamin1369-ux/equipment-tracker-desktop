name: Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest
    
    strategy:
      matrix:
        configuration: [Debug, Release]
        platform: [x64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@6fb02220983dee41ce7ae257b6f4d8f9bf5ed4ce # v2.0.0

    - name: Setup NuGet
      uses: NuGet/setup-nuget@a21f25cd3998bf370fde17e3f1b4c12c175172c9 # v2.0.0

    - name: Cache NuGet packages
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.config') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Clear NuGet caches (if needed)
      if: matrix.configuration == 'Release'
      run: nuget locals all -clear

    - name: Restore NuGet packages
      run: nuget restore EquipmentTracker.sln

    - name: Build solution
      run: |
        msbuild EquipmentTracker.sln /p:Configuration=${{ matrix.configuration }} /p:Platform="${{ matrix.platform }}" /p:OutputPath=bin\${{ matrix.configuration }}\ /verbosity:minimal

    - name: Verify build output
      shell: pwsh
      run: |
        Write-Host "Build output for ${{ matrix.configuration }} ${{ matrix.platform }}:"
        $outputPath = "EquipmentTracker\bin\${{ matrix.configuration }}"
        if (Test-Path $outputPath) {
          Get-ChildItem -Recurse $outputPath | Select-Object FullName, Length
          
          # Check for main executable
          $exePath = Join-Path $outputPath "EquipmentTracker.exe"
          if (Test-Path $exePath) {
            Write-Host "✓ Main executable found: $exePath"
          } else {
            Write-Host "✗ Main executable NOT found at: $exePath"
            exit 1
          }
          
          # Check for SQLite dependencies
          Write-Host "SQLite-related files:"
          Get-ChildItem -Recurse $outputPath -Filter "*SQLite*" | Select-Object FullName
        } else {
          Write-Host "✗ Output directory not found: $outputPath"
          exit 1
        }

    - name: Test application startup (Release only)
      if: matrix.configuration == 'Release'
      shell: pwsh
      timeout-minutes: 2
      run: |
        $exePath = "EquipmentTracker\bin\Release\EquipmentTracker.exe"
        if (Test-Path $exePath) {
          Write-Host "Testing application startup..."
          # Start the application in the background and kill it after a few seconds
          # This tests that it can initialize without crashing
          $process = Start-Process -FilePath $exePath -PassThru -WindowStyle Hidden
          Start-Sleep -Seconds 3
          if (!$process.HasExited) {
            Write-Host "✓ Application started successfully"
            Stop-Process -Id $process.Id -Force
          } else {
            Write-Host "✗ Application exited unexpectedly with code: $($process.ExitCode)"
            exit 1
          }
        }

    - name: Upload build artifacts
      if: matrix.configuration == 'Release'
      uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
      with:
        name: EquipmentTracker-${{ matrix.platform }}-${{ matrix.configuration }}
        path: |
          EquipmentTracker/bin/${{ matrix.configuration }}/
        retention-days: 7

  code-quality:
    runs-on: windows-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@6fb02220983dee41ce7ae257b6f4d8f9bf5ed4ce # v2.0.0
    
    - name: Code Analysis
      run: |
        echo "Running basic code quality checks..."
        # Check for common issues in C# files
        findstr /S /M "TODO\|FIXME\|HACK" EquipmentTracker\*.cs > nul
        if %errorlevel% == 0 (
          echo "⚠️ Found TODO/FIXME/HACK comments in code"
        ) else (
          echo "✓ No obvious code quality issues found"
        )
      shell: cmd

    - name: Check file encoding
      shell: pwsh
      run: |
        Write-Host "Checking file encodings..."
        $files = Get-ChildItem -Recurse -Filter "*.cs" EquipmentTracker\
        foreach ($file in $files) {
          $content = Get-Content $file.FullName -Raw -Encoding Byte
          if ($content[0] -eq 0xEF -and $content[1] -eq 0xBB -and $content[2] -eq 0xBF) {
            Write-Host "⚠️ File has UTF-8 BOM: $($file.Name)"
          }
        }
        Write-Host "✓ File encoding check completed"